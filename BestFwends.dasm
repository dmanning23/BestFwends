
    processor 6502
    include "vcs.h"
    include "macro.h"
    include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Constants segment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SpriteHeight	equ 13*2

MaxVelocity equ #06
RunningThreshold equ #04

StandingState   equ #00
WalkingState    equ #01
RunningState    equ #02
BrakingState    equ #03
RollingState    equ #04
StunnedState    equ #05

StunAmountTime equ #96

ringColor equ #$1A

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variables segment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    seg.u Variables
    org $80

;The player's X,Y position on the screen
;Playfield range:
;vert range: 0 - 164
;horiz range: 0 - 156
;TODO: clean up playfield range magic numbers
XPos1       .byte
XPos2       .byte
YPos1       .byte
YPos2       .byte

;The player's absolute X,Y velocity
;Valid values are 0 - 5
;Velocity > 2 equals running
XVel1       .byte
XVel2       .byte
YVel1       .byte
YVel2       .byte

;Which direction the player is moving.
;0 = Left, Up
;1 = Right, Down
XDirRight1  .byte
XDirRight2  .byte
YDirDown1   .byte
YDirDown2   .byte

;Which direction the player is facing
;0 = Left
;1 = Right
FaceRight1   .byte
FaceRight2   .byte

;Player states:
;0 = Standing
;1 = Walking
;2 = Running
;3 = Braking
;4 = Rolling
;5 = Stunned
PlayerState1 .byte
PlayerState2 .byte

;Boolean for whether or not the player is braking
Player1Braking .byte
Player2Braking .byte

;Timer used for the stunned state
Player1StunnedTimer .byte
Player2StunnedTimer .byte

;This points at the current sprite being drawn
spritePtr1 .word
spritePtr2 .word

;Pointer to the current color being drawn
spriteColorPtr1 .word
spriteColorPtr2 .word

;The timing of the current animation
animationTiming .byte

;The number of frames in the current animation
numAnimationFrames .byte

;The animation timer
currentAnimationTime .byte

;The current animation frame
currentAnimationFrame .byte

;This variable is used to mask the controller input to map to p1 or p2
controllerMask  .byte 

counter .byte

;Ring variables
ringX .byte      ; X position of ring
ringY .byte      ; Y position of ring
ringY1 .byte

;Random number seeds
RandomSeed .byte

;scratch variable
Temp .byte

;Used to time the game
;If this variable is anything but 0, the game is playing
GameTimer .byte

;The player scores
;This is super fucking obnoxious,
; but for some reason the rings are collected by the wrong player.
; Rather than fix this bug, I'm being a lazy programmer and just 
; switching everything else about score keeping >:)
Player1Score .byte
Player2Score .byte

; 2x5 array of playfield bytes, used for drawing scores
FontBuf	ds 10

; indexes for sound effect driver    
SFX_LEFT:       ds 1    ; stored in $B1
SFX_RIGHT:      ds 1    ; stored in $B2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Macro that implements Bank Switching trampoline
; X = bank number
; A = hi byte of destination PC
; Y = lo byte of destination PC
	MAC BANK_SWITCH_TRAMPOLINE
        pha             ; push hi byte
        tya             ; Y -> A
        pha             ; push lo byte
        lda $1FF8,x     ; do the bank switch
        rts             ; return to target
    ENDM

; Macro that performs bank switch
    MAC BANK_SWITCH
.Bank   SET {1}
.Addr   SET {2}
        lda #>(.Addr-1)
        ldy #<(.Addr-1)
        ldx #.Bank
        jmp BankSwitch
    ENDM

; Bank prologue that handles reset
; no matter which bank is selected at powerup
; it switches to bank 0 and jumps to Reset_0
    MAC BANK_PROLOGUE
        lda #>(Reset_0-1)
        ldy #<(Reset_0-1)
        ldx #$ff
        txs		; set up stack pointer
        inx		; X = 0
    ENDM

; Bank epilogue -- 6502 vectors
    MAC BANK_VECTORS
        .word Start      ; NMI
        .word Start      ; RESET
        .word Start	 ; BRK
    ENDM

    seg Code

    include "bank0.h"
    include "bank1.h"