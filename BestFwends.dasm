
	processor 6502
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"

SpriteHeight	equ 13*2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variables segment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    seg.u Variables
    org $80

;The player's X,Y position on the screen
;Playfield range:
;vert range: 0 - 164
;horiz range: 0 - 156
;TODO: clean up playfield range magic numbers
XPos1       .byte
XPos2       .byte
YPos1       .byte
YPos2       .byte

;The player's absolute X,Y velocity
;Valid values are 0 - 5
;Velocity > 2 equals running
XVel1       .byte
XVel2       .byte
YVel1       .byte
YVel2       .byte

MaxVelocity equ #06
RunningThreshold equ #04

;Which direction the player is moving.
;0 = Left, Up
;1 = Right, Down
XDirRight1  .byte
XDirRight2  .byte
YDirDown1   .byte
YDirDown2   .byte

;Which direction the player is facing
;0 = Left
;1 = Right
FaceRight1   .byte
FaceRight2   .byte

;Player states:
;0 = Standing
;1 = Walking
;2 = Running
;3 = Braking
;4 = Rolling
;5 = Stunned
PlayerState1 .byte
PlayerState2 .byte

StandingState   equ #00
WalkingState    equ #01
RunningState    equ #02
BrakingState    equ #03
RollingState    equ #04
StunnedState    equ #05

;Boolean for whether or not the player is braking
Player1Braking .byte
Player2Braking .byte

;This is a counter used to update the player sprites
spriteCounter .byte

;This points at the current sprite being drawn
spritePtr1 .word
spritePtr2 .word

;Pointer to the current color being drawn
spriteColorPtr1 .word
spriteColorPtr2 .word

;The timing of the current animation
animationTiming .byte

;The number of frames in the current animation
numAnimationFrames .byte

;The animation timer
currentAnimationTime .byte

;The current animation frame
currentAnimationFrame .byte

;This variable is used to mask the controller input to map to p1 or p2
controllerMask  .byte 

counter .byte

;This is used in the draw routine
localCoordinate .byte

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    seg Code
    org $f000

Start
    CLEAN_START
    
    ; set to quad
    lda #5
    sta NUSIZ0
    sta NUSIZ1

    lda #0
    sta REFP0
    sta REFP1
    sta RESP0
    sta RESP1
    sta HMP0
    sta HMP1

    ;set both players to the center horizontally
    lda #72
    sta YPos1
    sta YPos2

    ;set the player 1 x position, right side of screen
    lda #9
    sta XPos1

    ;set the player 2 x position, left side of screen
    lda #147
    sta XPos2
    
    ;initialize all the velocities
    lda #0
    sta XVel1
    sta XVel2
    sta YVel1
    sta YVel2

    ;initialize which direction the player is moving on each axis
    sta YDirDown1
    sta YDirDown2

    ;Set the states of the players
    sta PlayerState1
    sta PlayerState2
    sta Player1Braking
    sta Player2Braking

    ;make both players face right and move in the correct directions
    lda #1
    sta FaceRight1
    sta XDirRight1
    lda #0
    sta FaceRight2
    sta XDirRight2

    ;reset the counters
    lda #0
    sta counter
    sta spriteCounter
    sta localCoordinate

    ;reset the pointers
    sta spritePtr1
    sta spritePtr1+1
    sta spritePtr2
    sta spritePtr2+1
    sta spriteColorPtr1
    sta spriteColorPtr1+1
    sta spriteColorPtr2
    sta spriteColorPtr2+1

    ;set all the animation variables
    sta currentAnimationTime
    sta currentAnimationFrame
    lda #30
    sta animationTiming
    lda #1
    sta numAnimationFrames

NextFrame
    lsr SWCHB	; test Game Reset switch
    bcc Start	; reset?

    ; 1 + 3 lines of VSYNC
    VERTICAL_SYNC

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; 35 lines of underscan
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    TIMER_SETUP 35
    
    lda #0
    sta RESP0
    sta RESP1
    sta HMP0
    sta HMP1

	;Increment the frame counter 
    inc counter

    ;Since we are only drawing one player per frame, which one needs to have x pos set?
    lda counter
    and %00000001      ; Mask with 1 to isolate least significant bit
    tay ;store the current player in y

SetP1ControllerMask subroutine

    ;set the controller mask properly depending on which player we are updating
    beq .SetP1ControllerMask
    lda #%00001111 ;check p2 joystick
    sta controllerMask
    jmp .DoneSettingControllerMask

.SetP1ControllerMask
    lda #%11110000 ;this mask is used by the MoveJoystick routine to check p1 joystick
    sta controllerMask

.DoneSettingControllerMask

    ;update velocity?
    lda counter
    and %00001110      ;Only run this once every 8 frames
    beq UpdatePlayer
    jmp DoneUpdatePlayer



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Update Player Movement
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdatePlayer

    ;Set the player's braking flag to "not braking"
    lda #0
    sta Player1Braking,y

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; update the horizontal movement of the player
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;controller: ?
    ;movement: ?
    ;velocty: ?

    ;check if the player is holding right
    lda #%10001000	;right?
    and controllerMask
    and SWCHA
    bne CheckHoldingLeft ;if not, go check if holding left

    ;if they are:

    ;set the player to facing right
    lda #1
    sta FaceRight1,y

    jmp CheckMovingLeft ;go check if they are moving left

CheckHoldingLeft

    ;controller: not right
    ;movement: ?
    ;velocty: ?

    ;check if the player is holding left
    lda #%01000100	;left?
    and controllerMask
    and SWCHA
    bne CheckMovingHorizontalAtAll ;if not, check if the player is moving at all

    ;if they are:

    ;set the player to facing left
    lda #0
    sta FaceRight1,y

    ;go to check if they are moving right
    jmp CheckMovingRight

CheckMovingLeft

    ;controller: right
    ;movement: ?
    ;velocty: ?

    ;check if the player is moving left
    lda XDirRight1,y

    ;if they are, check if the player is StandingLeft
    beq StandingLeft

    ;if not, go increment the players velocity
    jmp IncrementPlayerVelocityHorizontal

StandingLeft

    ;controller: right
    ;movement: left
    ;velocty: ?

    ;check if the player is standing still
    lda XVel1,y

    ;the player is facing left and not standing still, they need to brake
    bne BrakePlayerHorizontal

    ;the player is facing left, not moving, and holding right on the joystick
    ;Set them to move right
    lda #1
    sta XDirRight1,y

    ;increment their velocity
    jmp IncrementPlayerVelocityHorizontal

CheckMovingRight

    ;controller: left
    ;movement: ?
    ;velocty: ?

    ;check if the player is moving right
    lda XDirRight1,y
    bne StandingRight ;if they are, check if the player is standing right

    ;if not, go increment the player's velocity
    jmp IncrementPlayerVelocityHorizontal

StandingRight

    ;controller: left
    ;movement: right
    ;velocty: ?

    ;check if the player is standing still
    lda XVel1,y

    ;the player is facing right and not standing still, they need to brake
    bne BrakePlayerHorizontal

    ;the player is facing right, not moving, and holding left on the joystick
    ;Set them to move right
    lda #0
    sta XDirRight1,y

    ;increment their velocity
    jmp IncrementPlayerVelocityHorizontal

CheckMovingHorizontalAtAll

    ;controller: none
    ;movement: ?
    ;velocty: ?

    ;check if the player is moving
    lda XVel1,y
    beq DoneUpdateHorizontalMovement ;if the player is not moving, done updating the player's horizontal velocity

    ;if the player is moving:
    ;face the direction of the player movement
    lda XDirRight1,y
    sta FaceRight1,y
    jmp DeceleratePlayerHorizontal ;go to teh decelerate step

BrakePlayerHorizontal subroutine

    ;TODO: the player can't brake when in the rolling state?

    ;is the player running?
    lda XVel1,y
    cmp RunningThreshold
    bcs .IsRunning

    ;if the player is walking, don't set them to braking
    jmp .DoneCheckBraking

    ;if the player is moving fast:
.IsRunning:
    ;Since the player is running, change the players state to Braking
    lda #1
    sta Player1Braking,y

.DoneCheckBraking

    ;Check if the player is moving faster than 2
    lda XVel1,y
    cmp #3
    bcc .BrakePlayerNotRunning

    ;Since the player is moving faster than 2, subtract 2 to slow them down drastically
    lda XVel1,y     ;Load the current velocity
    sec             ;Set carry flag before subtraction
    sbc #2          ;Subtract 2
    sta XVel1,y     ;Store it back to memory
    
    ;done updating the player's horizontal velocity
    jmp DoneUpdateHorizontalMovement

.BrakePlayerNotRunning

    ;Since the player is walking (moving less than 2), set their velocity to 0
    lda #0
    sta XVel1,y

    ;done updating the player's vertical velocity
    jmp DoneUpdateHorizontalMovement

IncrementPlayerVelocityHorizontal subroutine

    lda XVel1,y ;Load the value into accumulator
    clc         ;Clear carry flag
    adc #$01    ;Add 1 to accumulator
    sta XVel1,y ;Store it back to memory
    
    ;Clamp the velocity to the max velocity
    lda XVel1,y ;Load the value to check
    cmp MaxVelocity    ;Compare with max velocity
    bcc .NoClamp ;Branch if value < 8 (Carry Clear means less than)
    lda MaxVelocity    ;If we get here, value was >= max velocity, so load max velocity
    sta XVel1,y ;Store it back

.NoClamp
    ;Continue with rest of program
    jmp DoneUpdateHorizontalMovement

DeceleratePlayerHorizontal subroutine

    lda XVel1,y ;Load the velocity
    beq .SkipDeceleratePlayer ;If XVel1 = 0, skip deceleration
    sec ;Set carry flag
    sbc #1 ;Subtract 1
    sta XVel1,y ;Store the result back

.SkipDeceleratePlayer

DoneUpdateHorizontalMovement

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; update the vertical movement of the player
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;controller: ?
    ;movement: ?
    ;velocty: ?

    ;check if the player is holding down
    lda #%00100010	;down?
    and controllerMask
    bit SWCHA
    bne CheckHoldingUp ;if not, go check if holding up

    ;if they are:

    jmp CheckMovingUp ;go check if they are moving up

CheckHoldingUp

    ;controller: not down
    ;movement: ?
    ;velocty: ?

    ;check if the player is holding up
    lda #%00010001	;up?
    and controllerMask
    and SWCHA
    bne CheckMovingVerticalAtAll ;if not, check if the player is moving at all

    ;if they are:

    ;go to check if they are moving down
    jmp CheckMovingDown

CheckMovingUp

    ;controller: down
    ;movement: ?
    ;velocty: ?

    ;check if the player is moving up
    lda YDirDown1,y

    ;if they are, check if the player is standing still
    beq StandingUp

    ;if not, go increment the players velocity
    jmp IncrementPlayerVelocityVertical

StandingUp

    ;controller: down
    ;movement: up
    ;velocty: ?

    ;check if the player is standing still
    lda YVel1,y

    ;the player is facing up and not standing still, they need to brake
    bne BrakePlayerVertical

    ;the player is facing down, not moving, and holding down on the joystick
    ;Set them to move down
    lda #1
    sta YDirDown1,y

    ;increment their velocity
    jmp IncrementPlayerVelocityVertical

CheckMovingDown

    ;controller: up
    ;movement: ?
    ;velocty: ?

    ;check if the player is moving down
    lda YDirDown1,y
    bne StandingDown ;if they are, check if the player is standing still

    ;if not, go increment the player's velocity
    jmp IncrementPlayerVelocityVertical

StandingDown

    ;controller: up
    ;movement: down
    ;velocty: ?

    ;check if the player is standing still
    lda YVel1,y

    ;the player is facing down and not standing still, they need to brake
    bne BrakePlayerVertical

    ;the player is facing down, not moving, and holding left on the joystick
    ;Set them to move up
    lda #0
    sta YDirDown1,y

    ;increment their velocity
    jmp IncrementPlayerVelocityVertical

CheckMovingVerticalAtAll

    ;check if the player is moving
    lda YVel1,y
    beq DoneUpdateVerticalMovement ;if the player is not moving, done updating the player's vertical velocity

    ;if the player is moving:
    jmp DeceleratePlayerVertical ;go to teh decelerate step

BrakePlayerVertical subroutine

    ;TODO: the player can't brake when in the rolling state?

    ;is the player running?
    lda YVel1,y
    cmp RunningThreshold
    bcs .IsRunning

    ;if the player is walking, don't set them to braking
    jmp .DoneCheckBraking

    ;if the player is moving fast:
.IsRunning:
    ;Since the player is running, change the players state to Braking
    lda #1
    sta Player1Braking,y

.DoneCheckBraking

    ;Check if the player is moving faster than 2
    lda YVel1,y
    cmp #3
    bcc .BrakePlayerNotRunning

    ;Since the player is moving faster than 2, subtract 2 to slow them down drastically
    lda YVel1,y     ;Load the current velocity
    sec             ;Set carry flag before subtraction
    sbc #2          ;Subtract 2
    sta YVel1,y     ;Store it back to memory
    
    ;done updating the player's vertical velocity
    jmp DoneUpdateVerticalMovement

.BrakePlayerNotRunning

    ;Since the player is walking (moving less than 2), set their velocity to 0
    lda #0
    sta YVel1,y

    ;done updating the player's vertical velocity
    jmp DoneUpdateVerticalMovement

IncrementPlayerVelocityVertical subroutine

    lda YVel1,y ;Load the value into accumulator
    clc         ;Clear carry flag
    adc #$01    ;Add 1 to accumulator
    sta YVel1,y ;Store it back to memory
    
    ;Clamp the velocity to the max velocity
    lda YVel1,y ;Load the value to check
    cmp MaxVelocity    ;Compare with max velocity
    bcc .NoClamp ;Branch if value < 8 (Carry Clear means less than)
    lda MaxVelocity    ;If we get here, value was >= max velocity, so load max velocity
    sta YVel1,y ;Store it back

.NoClamp
    ;Continue with rest of program
    jmp DoneUpdateVerticalMovement

DeceleratePlayerVertical subroutine

    lda YVel1,y ;Load the velocity
    beq .SkipDeceleratePlayer ;If YVel1 = 0, skip deceleration
    sec ;Set carry flag
    sbc #1 ;Subtract 1
    sta YVel1,y ;Store the result back

.SkipDeceleratePlayer

DoneUpdateVerticalMovement



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Update Player State
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdatePlayerState

CheckIsBraking

    ;check if the player is braking
    lda Player1Braking,y

    ;if not, check if the player is running
    beq CheckXRunning

    ;if the player is braking:
    
    ;set their state to "Braking"
    lda BrakingState
    sta PlayerState1,y
    
    ;finish updating state
    jmp DoneUpdatingPlayerState

CheckXRunning subroutine

    ;check if the player's horizontal velocity is over the threshold for "running"
    lda XVel1,y
    cmp RunningThreshold
    bcs .IsRunning

    ;if not, check if the player is running vertically
    jmp CheckYRunning

    ;if the player is moving fast:
.IsRunning:
    ;set the state to "running"
    lda RunningState
    sta PlayerState1,y

    ;finish updating state
    jmp DoneUpdatingPlayerState

CheckYRunning subroutine

    ;check if the player's vertial velocity is over the threshold for "running"
    lda YVel1,y
    cmp RunningThreshold
    bcs .IsRunning

    ;if not, check if the player is walking horizontally
    jmp CheckXWalking

    ;if the player is moving fast:
.IsRunning:
    ;set the state to "running"
    lda RunningState
    sta PlayerState1,y

    ;finish updating state
    jmp DoneUpdatingPlayerState

CheckXWalking subroutine

    ;check if the player's horizontal velocity not equal to 0
    lda XVel1,y
    bne .IsWalking

    ;if the player's velocity is 0:

    ;check if the player is walking vertically
    jmp CheckYWalking

    ;if the player's velocity is not equal to 0:
.IsWalking:
    ;set the state to "walking"
    lda WalkingState
    sta PlayerState1,y

    ;finish updating state
    jmp DoneUpdatingPlayerState

CheckYWalking subroutine

    ;check if the player's vertical velocity not equal to 0
    lda YVel1,y
    bne .IsWalking

    ;if the player's velocity is 0:

    ;set the player's state to "standing"
    lda StandingState
    sta PlayerState1,y

    ;finish updating state
    jmp DoneUpdatingPlayerState

    ;if the player's velocity is not equal to 0:
.IsWalking:
    ;set the state to "walking"
    lda WalkingState
    sta PlayerState1,y

    ;finish updating state
    jmp DoneUpdatingPlayerState

DoneUpdatingPlayerState

;Skip all the way down here if we aren't updating the player this frame
DoneUpdatePlayer







    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; TODO: set the player sprite
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdatePlayerSprite subroutine

    ;Check which state the player is in
    lda PlayerState1,y
    cmp RunningState
    beq UpdateRunningSprite

    cmp WalkingState
    beq UpdateWalkingSprite

    cmp BrakingState
    beq UpdateBrakingSprite

    cmp RollingState
    beq .rollingSprite

    cmp StunnedState
    beq .stunnedSprite

    jmp UpdateStandingSprite

;We hit the page limit for doing beq
.rollingSprite
    jmp UpdateRollingSprite

.stunnedSprite
    jmp UpdateStunnedSprite

UpdateRunningSprite subroutine

    ;are we setting sonic or tails?
    cpy #0
    beq .sonic

    ;TODO: running animation

    ;Set the first player sprite to the Tails animation
    ldx #0
    lda #<TailsRunning11
    sta spritePtr1,x
    inx
    lda #>TailsRunning11
    sta spritePtr1,x

    ;set the animation variables
    lda TailsRunningSpeed
    sta animationTiming
    lda TailsRunningFrames
    sta numAnimationFrames

    jmp DoneUpdatingPlayerSprite

.sonic

    ;Set the first player sprite to the Sonic animation
    ldx #0
    lda #<SonicRunning11
    sta spritePtr1,x
    inx
    lda #>SonicRunning11
    sta spritePtr1,x

    ;set the animation variables
    lda SonicRunningSpeed
    sta animationTiming
    lda SonicRunningFrames
    sta numAnimationFrames

    jmp DoneUpdatingPlayerSprite

UpdateWalkingSprite subroutine

    cpy #0
    beq .sonic

    ldx #0
    lda #<TailsWalking11
    sta spritePtr1,x
    inx
    lda #>TailsWalking11
    sta spritePtr1,x

    lda TailsWalkingSpeed
    sta animationTiming
    lda TailsWalkingFrames
    sta numAnimationFrames

    jmp DoneUpdatingPlayerSprite

.sonic

    ldx #0
    lda #<SonicWalking11
    sta spritePtr1,x
    inx
    lda #>SonicWalking11
    sta spritePtr1,x

    lda SonicWalkingSpeed
    sta animationTiming
    lda SonicWalkingFrames
    sta numAnimationFrames

    jmp DoneUpdatingPlayerSprite

UpdateBrakingSprite subroutine

    cpy #0
    beq .sonic

    ;TODO: braking animation
    ldx #0
    lda #<TailsBraking11
    sta spritePtr1,x
    inx
    lda #>TailsBraking11
    sta spritePtr1,x

    lda TailsBrakingSpeed
    sta animationTiming
    lda TailsBrakingFrames
    sta numAnimationFrames

    jmp DoneUpdatingPlayerSprite

.sonic

    ldx #0
    lda #<SonicBraking11
    sta spritePtr1,x
    inx
    lda #>SonicBraking11
    sta spritePtr1,x

    lda SonicBrakingSpeed
    sta animationTiming
    lda SonicBrakingFrames
    sta numAnimationFrames

    jmp DoneUpdatingPlayerSprite

UpdateRollingSprite subroutine

    cpy #0
    beq .sonic

    ;TODO: rolling animation
    ldx #0
    lda #<TailsBall11
    sta spritePtr1,x
    inx
    lda #>TailsBall11
    sta spritePtr1,x

    lda TailsBallSpeed
    sta animationTiming
    lda TailsBallFrames
    sta numAnimationFrames

    jmp DoneUpdatingPlayerSprite

.sonic

    ;TODO: rolling animation
    ldx #0
    lda #<SonicBall11
    sta spritePtr1,x
    inx
    lda #>SonicBall11
    sta spritePtr1,x

    lda SonicBallSpeed
    sta animationTiming
    lda SonicBallFrames
    sta numAnimationFrames

    jmp DoneUpdatingPlayerSprite

UpdateStunnedSprite subroutine

    cpy #0
    beq .sonic

    ;TODO: stunned animation
    ldx #0
    lda #<TailsBall11
    sta spritePtr1,x
    inx
    lda #>TailsBall11
    sta spritePtr1,x

    lda #1
    sta animationTiming
    lda #1
    sta numAnimationFrames

    jmp DoneUpdatingPlayerSprite

.sonic

    ;TODO: stunned animation
    ldx #0
    lda #<SonicBall11
    sta spritePtr1,x
    inx
    lda #>SonicBall11
    sta spritePtr1,x

    lda #1
    sta animationTiming
    lda #1
    sta numAnimationFrames

    jmp DoneUpdatingPlayerSprite

UpdateStandingSprite subroutine

    cpy #0
    beq .sonic

    ldx #0
    lda #<TailsStanding11
    sta spritePtr1,x
    inx
    lda #>TailsStanding11
    sta spritePtr1,x

    lda TailsStandingSpeed
    sta animationTiming
    lda TailsStandingFrames
    sta numAnimationFrames

    jmp DoneUpdatingPlayerSprite

.sonic

    ldx #0
    lda #<SonicStanding11
    sta spritePtr1,x
    inx
    lda #>SonicStanding11
    sta spritePtr1,x

    lda SonicStandingSpeed
    sta animationTiming
    lda SonicStandingFrames
    sta numAnimationFrames

    jmp DoneUpdatingPlayerSprite

DoneUpdatingPlayerSprite

UpdateAnimation subroutine

    ;don't update the animation if the number of frames is less than 1
    lda numAnimationFrames     ; Load number of frames
    cmp #2                     ; Compare with 2
    bcs .continue               ; Branch if numAnimationFrames >= 2
    jmp .doneUpdatingAnimation ; Skip if numAnimationFrames <= 1

.continue:

    ;Update the animation time 

    ;Increment the current animation time
    inc currentAnimationTime

    ;Check if it is time to increment the frame
    lda currentAnimationTime ; Load currentAnimationTime into accumulator
    cmp animationTiming ; Compare with animationTiming
    bcc .doneUpdatingAnimationTime ; Branch if currentAnimationTime < animationTiming

    ; If we get here, currentAnimationTime >= animationTiming
    lda #0                     ; Load 0 into accumulator
    sta currentAnimationTime   ; Reset currentAnimationTime to 0
    inc currentAnimationFrame  ; Increment the animation frame

.doneUpdatingAnimationTime

    ;Update the animation frame

    lda currentAnimationFrame ; Load current frame into accumulator
    cmp numAnimationFrames ; Compare with max frames
    ;beq .doneUpdatingAnimationFrame ; If equal, we're good
    bcc .doneUpdatingAnimationFrame ; Branch if currentAnimationFrame < numAnimationFrames

    ; If we get here, currentAnimationFrame >= numAnimationFrames
    lda #0 ; Load 0 into accumulator
    sta currentAnimationFrame ; Reset frame back to 0

.doneUpdatingAnimationFrame:

    ;Move the sprite pointer to point to the correct animation frame

    lda currentAnimationFrame  ; Check if frame is 0
    beq .doneUpdatingSpritePointer                  ; If 0, no adding needed

    ldx currentAnimationFrame ; Use X as our counter
    
.addLoop:
    clc                       ; Clear carry before addition
    lda spritePtr1           ; Add 52 to pointer
    adc #52
    sta spritePtr1
    lda spritePtr1+1         ; Add carry to high byte
    adc #0
    sta spritePtr1+1
    
    dex                      ; Decrement counter
    bne .addLoop             ; Keep going if we're not done

.doneUpdatingSpritePointer

.doneUpdatingAnimation

    ;set up rest of the player sprites

    ;Set the second player sprite
    ldx spriteCounter
    lda spritePtr1,x        ; Load the low byte value
    clc                     ; Clear carry before addition
    adc #13                 ; Add 13 to the value
    sta spritePtr2,x
    inx
    lda spritePtr1,x        ; Load the high byte value
    adc #0                  ; Add carry if it occurred from low byte addition
    sta spritePtr2,x

    ;Set the player color
    ldx spriteCounter
    lda spritePtr1,x        ; Load the low byte value
    clc                     ; Clear carry before addition
    adc #26                 ; Point at the color frame
    sta spriteColorPtr1,x
    inx
    lda spritePtr1,x        ; Load the high byte value
    adc #0                  ; Add carry if it occurred from low byte addition
    sta spriteColorPtr1,x

    ;Set the second player color
    ldx spriteCounter
    lda spritePtr1,x        ; Load the low byte value
    clc                     ; Clear carry before addition
    adc #39                 ; Point at the color frame
    sta spriteColorPtr2,x
    inx
    lda spritePtr1,x        ; Load the high byte value
    adc #0                  ; Add carry if it occurred from low byte addition
    sta spriteColorPtr2,x







    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Flip the player sprite if necessary
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FlipPlayerSprite subroutine

    ;flip the player if necessary
    lda FaceRight1,y
    bne .FlipPlayerSpriteRight

    ;Face the player to the left
    lda #%00001000
    sta REFP0
    sta REFP1
    jmp .DoneFlippingPlayerSprite

.FlipPlayerSpriteRight
    lda #0
    sta REFP0
    sta REFP1

.DoneFlippingPlayerSprite



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Update Player Positions
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdatePosition subroutine

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Set the horizontal screen position of the correct player
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    lda XPos1,y
    ldx #0
    jsr SetHorizPos
    lda XPos1,y
    ldx #1
    jsr SetHorizPos

    sta WSYNC	; sync w/ scanline
    sta HMOVE	; apply fine offsets

    ;is the player moving right?
    lda XDirRight1,y
    bne .AddHorizontalVelocityToPosition

    ;the player is mvoing left, subtract their position
    lda XPos1,y    ; Load first value into accumulator
    sec                ; Clear carry flag before addition
    sbc XVel1,y   ; Add second value to accumulator
    sta XPos1,y         ; Store the sum in result memory location

    ;if the player position underflowed, set to 156
    cmp #157
    bcc .DoneClampingHorizontalUnderflow
    lda #156
    sta XPos1,y 

.DoneClampingHorizontalUnderflow

    jmp .DoneAddingHorizontalVelocityToPosition

.AddHorizontalVelocityToPosition:

    ;add velocity to position
    lda XPos1,y    ; Load first value into accumulator
    clc                ; Clear carry flag before addition
    adc XVel1,y   ; Add second value to accumulator
    sta XPos1,y         ; Store the sum in result memory location

    ;if the player position overflowed, set to 0
    cmp #157
    bcc .DoneClampingHorizontalOverflow
    lda #0
    sta XPos1,y 

.DoneClampingHorizontalOverflow

.DoneAddingHorizontalVelocityToPosition

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Set the vertical screen position of the correct player
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;is the player moving down?
    lda YDirDown1,y
    beq .AddVerticalVelocityToPosition

    ;the player is moving up, subtract their position
    lda YPos1,y    ; Load first value into accumulator
    sec                ; Clear carry flag before addition
    sbc YVel1,y   ; Add second value to accumulator
    sta YPos1,y         ; Store the sum in result memory location

    ;if the player position underflowed, set to 164
    cmp #173
    bcc .DoneClampingVerticalUnderflow
    lda #172
    sta YPos1,y 

.DoneClampingVerticalUnderflow

    jmp .DoneAddingVerticalVelocityToPosition

.AddVerticalVelocityToPosition:

    ;add velocity to position
    lda YPos1,y    ; Load first value into accumulator
    clc                ; Clear carry flag before addition
    adc YVel1,y   ; Add second value to accumulator
    sta YPos1,y         ; Store the sum in result memory location

    ;if the player position overflowed, set to 0
    cmp #173
    bcc .DoneClampingVerticalOverflow
    lda #0
    sta YPos1,y 

.DoneClampingVerticalOverflow

.DoneAddingVerticalVelocityToPosition

    TIMER_WAIT



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; 192 lines of frame
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;Which player is being drawn this frame?
    lda counter
    and #$01
    beq DrawP1

    ;load the Tails coordinate
    lda YPos2
    sta localCoordinate
    jmp DrawPlayer

DrawP1
    ;load the sonic coordinate
    lda YPos1
    sta localCoordinate

DrawPlayer subroutine
    ldx #192	; X = 192 scanlines
.LVScan
    txa		; X -> A
    sec		; set carry for subtract
    sbc localCoordinate	; local coordinate
    cmp #SpriteHeight ; in sprite?
    bcc .InSprite	; yes, skip over next
    lda #0		; not in sprite, load 0
.InSprite
    lsr        ; Shift right (divide by 2)
    ;lsr        ; Shift right again (divide by 4)
    tay		; local coord -> Y

    lda (spritePtr1),y	; lookup color
    sta WSYNC	; sync w/ scanline
    sta GRP0	; store bitmap
    lda (spriteColorPtr1),y ; lookup color
    sta COLUP0	; store color

    lda (spritePtr2),y	; lookup color
    sta GRP1	; store bitmap
    lda (spriteColorPtr2),y ; lookup color
    sta COLUP1	; store color

    dex		; decrement X
    bne .LVScan	; repeat until 192 lines



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; 29 lines of overscan
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

OverScan
    TIMER_SETUP 29
    lda $0 ;dont draw the sprite in the overscan
    sta GRP0
    sta COLUP0
    sta GRP1
    sta COLUP1
    TIMER_WAIT
    ; total = 262 lines, go to next frame
    jmp NextFrame



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; SetHorizPos routine
    ; A = X coordinate
    ; X = player number (0 or 1)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SetHorizPos subroutine
	sta WSYNC	; start a new line
	sec		; set carry flag
.DivideLoop
	sbc #15		; subtract 15
	bcs .DivideLoop	; branch until negative
	eor #7		; calculate fine offset
	asl
	asl
	asl
	asl
	sta RESP0,x	; fix coarse position
	sta HMP0,x	; set fine offset
	rts		; return to caller



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Graphics Data
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;






;Tails Sprite Data (Height: 13)

;Standing Animation Data:
TailsStanding11
  .byte %00000000 ; Row 1
  .byte %00010001 ; Row 2
  .byte %00001010 ; Row 3
  .byte %00001010 ; Row 4
  .byte %11111000 ; Row 5
  .byte %00101000 ; Row 6
  .byte %01101110 ; Row 7
  .byte %00001000 ; Row 8
  .byte %00011010 ; Row 9
  .byte %00011010 ; Row 10
  .byte %00010010 ; Row 11
  .byte %00011111 ; Row 12
  .byte %00010100 ; Row 13

TailsStanding12
  .byte %00000000 ; Row 1
  .byte %00001010 ; Row 2
  .byte %00000000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000110 ; Row 5
  .byte %11000110 ; Row 6
  .byte %00000000 ; Row 7
  .byte %01100111 ; Row 8
  .byte %00000101 ; Row 9
  .byte %00000101 ; Row 10
  .byte %00001101 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00000000 ; Row 13

TailsStandingColor11
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsStandingColor12
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsStandingSpeed:
  .byte 30 ; Animation speed

TailsStandingFrames:
  .byte 1 ; Number of frames

;Walking Animation Data:
TailsWalking11
  .byte %00000000 ; Row 1
  .byte %00001000 ; Row 2
  .byte %00000001 ; Row 3
  .byte %00001001 ; Row 4
  .byte %01111000 ; Row 5
  .byte %10011000 ; Row 6
  .byte %11001110 ; Row 7
  .byte %00001000 ; Row 8
  .byte %00011010 ; Row 9
  .byte %00011010 ; Row 10
  .byte %00010010 ; Row 11
  .byte %00011111 ; Row 12
  .byte %00010100 ; Row 13

TailsWalking12
  .byte %00000000 ; Row 1
  .byte %00010000 ; Row 2
  .byte %00010000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000110 ; Row 5
  .byte %01100110 ; Row 6
  .byte %00000000 ; Row 7
  .byte %11000111 ; Row 8
  .byte %00000101 ; Row 9
  .byte %00000101 ; Row 10
  .byte %00001101 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00000000 ; Row 13

TailsWalkingColor11
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsWalkingColor12
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsWalking21
  .byte %00000000 ; Row 1
  .byte %00100001 ; Row 2
  .byte %00000010 ; Row 3
  .byte %00010010 ; Row 4
  .byte %01111000 ; Row 5
  .byte %10011000 ; Row 6
  .byte %11001110 ; Row 7
  .byte %00001000 ; Row 8
  .byte %00011010 ; Row 9
  .byte %00011010 ; Row 10
  .byte %00010010 ; Row 11
  .byte %00011111 ; Row 12
  .byte %00010100 ; Row 13

TailsWalking22
  .byte %00000000 ; Row 1
  .byte %00000010 ; Row 2
  .byte %00100000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000110 ; Row 5
  .byte %01100110 ; Row 6
  .byte %00000000 ; Row 7
  .byte %11000111 ; Row 8
  .byte %00000101 ; Row 9
  .byte %00000101 ; Row 10
  .byte %00001101 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00000000 ; Row 13

TailsWalkingColor21
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsWalkingColor22
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $0E ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsWalking31
  .byte %00000000 ; Row 1
  .byte %00000010 ; Row 2
  .byte %00100100 ; Row 3
  .byte %00001100 ; Row 4
  .byte %11111000 ; Row 5
  .byte %00101000 ; Row 6
  .byte %01101110 ; Row 7
  .byte %00001000 ; Row 8
  .byte %00011010 ; Row 9
  .byte %00011010 ; Row 10
  .byte %00011111 ; Row 11
  .byte %00010010 ; Row 12
  .byte %00010100 ; Row 13

TailsWalking32
  .byte %00000000 ; Row 1
  .byte %00000100 ; Row 2
  .byte %00010000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000110 ; Row 5
  .byte %11000110 ; Row 6
  .byte %00000000 ; Row 7
  .byte %01100111 ; Row 8
  .byte %00000101 ; Row 9
  .byte %00000101 ; Row 10
  .byte %00000000 ; Row 11
  .byte %00001101 ; Row 12
  .byte %00000000 ; Row 13

TailsWalkingColor31
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsWalkingColor32
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $0E ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsWalking41
  .byte %00000000 ; Row 1
  .byte %00000100 ; Row 2
  .byte %00001000 ; Row 3
  .byte %00001100 ; Row 4
  .byte %11111000 ; Row 5
  .byte %00101000 ; Row 6
  .byte %01101110 ; Row 7
  .byte %00001000 ; Row 8
  .byte %00011010 ; Row 9
  .byte %00011010 ; Row 10
  .byte %00011111 ; Row 11
  .byte %00010010 ; Row 12
  .byte %00010100 ; Row 13

TailsWalking42
  .byte %00000000 ; Row 1
  .byte %00001000 ; Row 2
  .byte %00000000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000110 ; Row 5
  .byte %11000110 ; Row 6
  .byte %00000000 ; Row 7
  .byte %01100111 ; Row 8
  .byte %00000101 ; Row 9
  .byte %00000101 ; Row 10
  .byte %00000000 ; Row 11
  .byte %00001101 ; Row 12
  .byte %00000000 ; Row 13

TailsWalkingColor41
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsWalkingColor42
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsWalkingSpeed:
  .byte 4 ; Animation speed

TailsWalkingFrames:
  .byte 4 ; Number of frames

;Running Animation Data:
TailsRunning11
  .byte %00000000 ; Row 1
  .byte %01100100 ; Row 2
  .byte %10001000 ; Row 3
  .byte %01000110 ; Row 4
  .byte %01100011 ; Row 5
  .byte %00010000 ; Row 6
  .byte %10010011 ; Row 7
  .byte %11111101 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00100100 ; Row 12
  .byte %01111110 ; Row 13

TailsRunning12
  .byte %00000000 ; Row 1
  .byte %00000010 ; Row 2
  .byte %00010001 ; Row 3
  .byte %00100000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00011010 ; Row 12
  .byte %00000000 ; Row 13

TailsRunningColor11
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsRunningColor12
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsRunning21
  .byte %00000000 ; Row 1
  .byte %01000000 ; Row 2
  .byte %10001001 ; Row 3
  .byte %01100110 ; Row 4
  .byte %00110010 ; Row 5
  .byte %00010000 ; Row 6
  .byte %01010010 ; Row 7
  .byte %01111110 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00100100 ; Row 12
  .byte %01111110 ; Row 13

TailsRunning22
  .byte %00000000 ; Row 1
  .byte %00100110 ; Row 2
  .byte %00010000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00011010 ; Row 12
  .byte %00000000 ; Row 13

TailsRunningColor21
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsRunningColor22
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsRunning31
  .byte %00000000 ; Row 1
  .byte %00000010 ; Row 2
  .byte %10010001 ; Row 3
  .byte %01100110 ; Row 4
  .byte %00010100 ; Row 5
  .byte %00010000 ; Row 6
  .byte %00110000 ; Row 7
  .byte %00111100 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00100100 ; Row 12
  .byte %01111110 ; Row 13

TailsRunning32
  .byte %00000000 ; Row 1
  .byte %01100100 ; Row 2
  .byte %00001000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00011010 ; Row 12
  .byte %00000000 ; Row 13

TailsRunningColor31
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsRunningColor32
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsRunning41
  .byte %00000000 ; Row 1
  .byte %00100110 ; Row 2
  .byte %00010001 ; Row 3
  .byte %01100010 ; Row 4
  .byte %00001000 ; Row 5
  .byte %00010000 ; Row 6
  .byte %00010000 ; Row 7
  .byte %00011100 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00111110 ; Row 12
  .byte %01100100 ; Row 13

TailsRunning42
  .byte %00000000 ; Row 1
  .byte %01000000 ; Row 2
  .byte %10001000 ; Row 3
  .byte %00000100 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00011010 ; Row 13

TailsRunningColor41
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsRunningColor42
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsRunning51
  .byte %00000000 ; Row 1
  .byte %01100110 ; Row 2
  .byte %00011001 ; Row 3
  .byte %00100000 ; Row 4
  .byte %00010100 ; Row 5
  .byte %00010000 ; Row 6
  .byte %00110010 ; Row 7
  .byte %00111110 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00111110 ; Row 12
  .byte %01100100 ; Row 13

TailsRunning52
  .byte %00000000 ; Row 1
  .byte %00000000 ; Row 2
  .byte %10000000 ; Row 3
  .byte %01000110 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00011010 ; Row 13

TailsRunningColor51
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsRunningColor52
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsRunning61
  .byte %00000000 ; Row 1
  .byte %01100110 ; Row 2
  .byte %10011000 ; Row 3
  .byte %00000100 ; Row 4
  .byte %00100001 ; Row 5
  .byte %00010000 ; Row 6
  .byte %01010011 ; Row 7
  .byte %01111101 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00111110 ; Row 12
  .byte %01100100 ; Row 13

TailsRunning62
  .byte %00000000 ; Row 1
  .byte %00000000 ; Row 2
  .byte %00000001 ; Row 3
  .byte %01100010 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00011010 ; Row 13

TailsRunningColor61
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsRunningColor62
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsRunningSpeed:
  .byte 1 ; Animation speed

TailsRunningFrames:
  .byte 6 ; Number of frames

;Ball Animation Data:
TailsBall11
  .byte %00000000 ; Row 1
  .byte %00011000 ; Row 2
  .byte %00111100 ; Row 3
  .byte %01111110 ; Row 4
  .byte %01111110 ; Row 5
  .byte %01001110 ; Row 6
  .byte %01001110 ; Row 7
  .byte %00111100 ; Row 8
  .byte %00011000 ; Row 9
  .byte %00000000 ; Row 10
  .byte %00000000 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00000000 ; Row 13

TailsBall12
  .byte %00000000 ; Row 1
  .byte %00000000 ; Row 2
  .byte %00000000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00110000 ; Row 6
  .byte %00110000 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00000000 ; Row 9
  .byte %00000000 ; Row 10
  .byte %00000000 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00000000 ; Row 13

TailsBallColor11
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsBallColor12
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsBallSpeed:
  .byte 30 ; Animation speed

TailsBallFrames:
  .byte 1 ; Number of frames

;Braking Animation Data:
TailsBraking11
  .byte %00000000 ; Row 1
  .byte %00000100 ; Row 2
  .byte %00010010 ; Row 3
  .byte %00001010 ; Row 4
  .byte %00000101 ; Row 5
  .byte %00000001 ; Row 6
  .byte %00000001 ; Row 7
  .byte %00000111 ; Row 8
  .byte %00001000 ; Row 9
  .byte %00011010 ; Row 10
  .byte %00111010 ; Row 11
  .byte %00011111 ; Row 12
  .byte %00110010 ; Row 13

TailsBraking12
  .byte %00000000 ; Row 1
  .byte %01100010 ; Row 2
  .byte %00001000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00000110 ; Row 6
  .byte %00000110 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00000111 ; Row 9
  .byte %00000101 ; Row 10
  .byte %00000101 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00001101 ; Row 13

TailsBrakingColor11
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsBrakingColor12
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsBraking21
  .byte %00000000 ; Row 1
  .byte %00000100 ; Row 2
  .byte %00010010 ; Row 3
  .byte %00001010 ; Row 4
  .byte %00000101 ; Row 5
  .byte %00000001 ; Row 6
  .byte %00000001 ; Row 7
  .byte %00000111 ; Row 8
  .byte %00001000 ; Row 9
  .byte %00011010 ; Row 10
  .byte %00111010 ; Row 11
  .byte %00011111 ; Row 12
  .byte %00110010 ; Row 13

TailsBraking22
  .byte %00000000 ; Row 1
  .byte %00000010 ; Row 2
  .byte %11001000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00000110 ; Row 6
  .byte %00000110 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00000111 ; Row 9
  .byte %00000101 ; Row 10
  .byte %00000101 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00001101 ; Row 13

TailsBrakingColor21
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsBrakingColor22
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsBraking31
  .byte %00000000 ; Row 1
  .byte %00000100 ; Row 2
  .byte %00010010 ; Row 3
  .byte %00001010 ; Row 4
  .byte %00000101 ; Row 5
  .byte %00000001 ; Row 6
  .byte %00000001 ; Row 7
  .byte %00000111 ; Row 8
  .byte %00001000 ; Row 9
  .byte %00011010 ; Row 10
  .byte %00111010 ; Row 11
  .byte %00011111 ; Row 12
  .byte %00110010 ; Row 13

TailsBraking32
  .byte %00000000 ; Row 1
  .byte %00011010 ; Row 2
  .byte %00001000 ; Row 3
  .byte %10000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00000110 ; Row 6
  .byte %00000110 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00000111 ; Row 9
  .byte %00000101 ; Row 10
  .byte %00000101 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00001101 ; Row 13

TailsBrakingColor31
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $2E ; Row 4
  .byte $2E ; Row 5
  .byte $2E ; Row 6
  .byte $2E ; Row 7
  .byte $2E ; Row 8
  .byte $2E ; Row 9
  .byte $2E ; Row 10
  .byte $2E ; Row 11
  .byte $2E ; Row 12
  .byte $2E ; Row 13

TailsBrakingColor32
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $0E ; Row 4
  .byte $0E ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $0E ; Row 8
  .byte $8A ; Row 9
  .byte $0E ; Row 10
  .byte $2A ; Row 11
  .byte $2A ; Row 12
  .byte $2A ; Row 13

TailsBrakingSpeed:
  .byte 4 ; Animation speed

TailsBrakingFrames:
  .byte 3 ; Number of frames















;Sonic Sprite Data (Height: 13)

;Standing Animation Data:
SonicStanding11
  .byte %00000000 ; Row 1
  .byte %00100010 ; Row 2
  .byte %00000000 ; Row 3
  .byte %00010100 ; Row 4
  .byte %00010100 ; Row 5
  .byte %00010000 ; Row 6
  .byte %00010000 ; Row 7
  .byte %00011100 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00100100 ; Row 12
  .byte %01111110 ; Row 13

SonicStanding12
  .byte %00000000 ; Row 1
  .byte %00010100 ; Row 2
  .byte %00010100 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00011010 ; Row 12
  .byte %00000000 ; Row 13

SonicStandingColor11
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $88 ; Row 3
  .byte $88 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicStandingColor12
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $88 ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $86 ; Row 12
  .byte $00 ; Row 13

SonicStandingSpeed:
  .byte 30 ; Animation speed

SonicStandingFrames:
  .byte 1 ; Number of frames

;Walking Animation Data:
SonicWalking11
  .byte %00000000 ; Row 1
  .byte %00010000 ; Row 2
  .byte %00100001 ; Row 3
  .byte %00100010 ; Row 4
  .byte %00010110 ; Row 5
  .byte %00010000 ; Row 6
  .byte %00010000 ; Row 7
  .byte %00011100 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00100100 ; Row 12
  .byte %01111110 ; Row 13

SonicWalking12
  .byte %00000000 ; Row 1
  .byte %00100000 ; Row 2
  .byte %00000010 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00011010 ; Row 12
  .byte %00000000 ; Row 13

SonicWalkingColor11
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $88 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicWalkingColor12
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $0E ; Row 3
  .byte $38 ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $86 ; Row 12
  .byte $00 ; Row 13

SonicWalking21
  .byte %00000000 ; Row 1
  .byte %00100001 ; Row 2
  .byte %00000000 ; Row 3
  .byte %00100010 ; Row 4
  .byte %00100100 ; Row 5
  .byte %00010000 ; Row 6
  .byte %00010000 ; Row 7
  .byte %00011100 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00100100 ; Row 12
  .byte %01111110 ; Row 13

SonicWalking22
  .byte %00000000 ; Row 1
  .byte %01000010 ; Row 2
  .byte %01000010 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00011010 ; Row 12
  .byte %00000000 ; Row 13

SonicWalkingColor21
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $88 ; Row 3
  .byte $88 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicWalkingColor22
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $88 ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $86 ; Row 12
  .byte $00 ; Row 13

SonicWalking31
  .byte %00000000 ; Row 1
  .byte %00000010 ; Row 2
  .byte %00010000 ; Row 3
  .byte %00010100 ; Row 4
  .byte %00010100 ; Row 5
  .byte %00010000 ; Row 6
  .byte %00010000 ; Row 7
  .byte %00011100 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00111110 ; Row 12
  .byte %01100100 ; Row 13

SonicWalking32
  .byte %00000000 ; Row 1
  .byte %00000100 ; Row 2
  .byte %00100100 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00011010 ; Row 13

SonicWalkingColor31
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $88 ; Row 3
  .byte $88 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicWalkingColor32
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $88 ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $0E ; Row 12
  .byte $86 ; Row 13

SonicWalking41
  .byte %00000000 ; Row 1
  .byte %00000100 ; Row 2
  .byte %00010000 ; Row 3
  .byte %00011000 ; Row 4
  .byte %00011000 ; Row 5
  .byte %00010000 ; Row 6
  .byte %00010000 ; Row 7
  .byte %00011100 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00111110 ; Row 12
  .byte %01100100 ; Row 13

SonicWalking42
  .byte %00000000 ; Row 1
  .byte %00001000 ; Row 2
  .byte %00001000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00011010 ; Row 13

SonicWalkingColor41
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $88 ; Row 3
  .byte $88 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicWalkingColor42
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $88 ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $0E ; Row 12
  .byte $86 ; Row 13

SonicWalkingSpeed:
  .byte 3 ; Animation speed

SonicWalkingFrames:
  .byte 4 ; Number of frames

;Running Animation Data:
SonicRunning11
  .byte %00000000 ; Row 1
  .byte %01100100 ; Row 2
  .byte %10001000 ; Row 3
  .byte %01000110 ; Row 4
  .byte %01100011 ; Row 5
  .byte %00010000 ; Row 6
  .byte %10010011 ; Row 7
  .byte %11111101 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00100100 ; Row 12
  .byte %01111110 ; Row 13

SonicRunning12
  .byte %00000000 ; Row 1
  .byte %00000010 ; Row 2
  .byte %00010001 ; Row 3
  .byte %00100000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00011010 ; Row 12
  .byte %00000000 ; Row 13

SonicRunningColor11
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $38 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicRunningColor12
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $0E ; Row 3
  .byte $0E ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $86 ; Row 12
  .byte $00 ; Row 13

SonicRunning21
  .byte %00000000 ; Row 1
  .byte %01000000 ; Row 2
  .byte %10001001 ; Row 3
  .byte %01100110 ; Row 4
  .byte %00110010 ; Row 5
  .byte %00010000 ; Row 6
  .byte %01010010 ; Row 7
  .byte %01111110 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00100100 ; Row 12
  .byte %01111110 ; Row 13

SonicRunning22
  .byte %00000000 ; Row 1
  .byte %00100110 ; Row 2
  .byte %00010000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00011010 ; Row 12
  .byte %00000000 ; Row 13

SonicRunningColor21
  .byte $38 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $38 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicRunningColor22
  .byte $0E ; Row 1
  .byte $0E ; Row 2
  .byte $0E ; Row 3
  .byte $88 ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $86 ; Row 12
  .byte $00 ; Row 13

SonicRunning31
  .byte %00000000 ; Row 1
  .byte %00000010 ; Row 2
  .byte %10010001 ; Row 3
  .byte %01100110 ; Row 4
  .byte %00010100 ; Row 5
  .byte %00010000 ; Row 6
  .byte %00110000 ; Row 7
  .byte %00111100 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00100100 ; Row 12
  .byte %01111110 ; Row 13

SonicRunning32
  .byte %00000000 ; Row 1
  .byte %01100100 ; Row 2
  .byte %00001000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00011010 ; Row 12
  .byte %00000000 ; Row 13

SonicRunningColor31
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $38 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicRunningColor32
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $0E ; Row 3
  .byte $0E ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $86 ; Row 12
  .byte $00 ; Row 13

SonicRunning41
  .byte %00000000 ; Row 1
  .byte %00100110 ; Row 2
  .byte %00010001 ; Row 3
  .byte %01100010 ; Row 4
  .byte %00001000 ; Row 5
  .byte %00010000 ; Row 6
  .byte %00010000 ; Row 7
  .byte %00011100 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00111110 ; Row 12
  .byte %01100100 ; Row 13

SonicRunning42
  .byte %00000000 ; Row 1
  .byte %01000000 ; Row 2
  .byte %10001000 ; Row 3
  .byte %00000100 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00011010 ; Row 13

SonicRunningColor41
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $38 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicRunningColor42
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $0E ; Row 3
  .byte $0E ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $86 ; Row 12
  .byte $86 ; Row 13

SonicRunning51
  .byte %00000000 ; Row 1
  .byte %01100110 ; Row 2
  .byte %00011001 ; Row 3
  .byte %00100000 ; Row 4
  .byte %00010100 ; Row 5
  .byte %00010000 ; Row 6
  .byte %00110010 ; Row 7
  .byte %00111110 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00111110 ; Row 12
  .byte %01100100 ; Row 13

SonicRunning52
  .byte %00000000 ; Row 1
  .byte %00000000 ; Row 2
  .byte %10000000 ; Row 3
  .byte %01000110 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00011010 ; Row 13

SonicRunningColor51
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $38 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicRunningColor52
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $0E ; Row 3
  .byte $0E ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $86 ; Row 12
  .byte $86 ; Row 13

SonicRunning61
  .byte %00000000 ; Row 1
  .byte %01100110 ; Row 2
  .byte %10011000 ; Row 3
  .byte %00000100 ; Row 4
  .byte %00100001 ; Row 5
  .byte %00010000 ; Row 6
  .byte %01010011 ; Row 7
  .byte %01111101 ; Row 8
  .byte %00010000 ; Row 9
  .byte %00110100 ; Row 10
  .byte %01110100 ; Row 11
  .byte %00111110 ; Row 12
  .byte %01100100 ; Row 13

SonicRunning62
  .byte %00000000 ; Row 1
  .byte %00000000 ; Row 2
  .byte %00000001 ; Row 3
  .byte %01100010 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00001100 ; Row 6
  .byte %00001100 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00001110 ; Row 9
  .byte %00001010 ; Row 10
  .byte %00001010 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00011010 ; Row 13

SonicRunningColor61
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $38 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicRunningColor62
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $0E ; Row 3
  .byte $0E ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $86 ; Row 12
  .byte $86 ; Row 13

SonicRunningSpeed:
  .byte 1 ; Animation speed

SonicRunningFrames:
  .byte 6 ; Number of frames

;Ball Animation Data:
SonicBall11
  .byte %00000000 ; Row 1
  .byte %00011000 ; Row 2
  .byte %00111100 ; Row 3
  .byte %01111110 ; Row 4
  .byte %01111110 ; Row 5
  .byte %01001110 ; Row 6
  .byte %01001110 ; Row 7
  .byte %00111100 ; Row 8
  .byte %00011000 ; Row 9
  .byte %00000000 ; Row 10
  .byte %00000000 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00000000 ; Row 13

SonicBall12
  .byte %00000000 ; Row 1
  .byte %00000000 ; Row 2
  .byte %00000000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00110000 ; Row 6
  .byte %00110000 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00000000 ; Row 9
  .byte %00000000 ; Row 10
  .byte %00000000 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00000000 ; Row 13

SonicBallColor11
  .byte $88 ; Row 1
  .byte $88 ; Row 2
  .byte $88 ; Row 3
  .byte $88 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicBallColor12
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $38 ; Row 3
  .byte $88 ; Row 4
  .byte $FC ; Row 5
  .byte $0E ; Row 6
  .byte $0E ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $86 ; Row 12
  .byte $00 ; Row 13

SonicBallSpeed:
  .byte 30 ; Animation speed

SonicBallFrames:
  .byte 1 ; Number of frames

;Braking Animation Data:
SonicBraking11
  .byte %00000000 ; Row 1
  .byte %00000100 ; Row 2
  .byte %00010010 ; Row 3
  .byte %00001010 ; Row 4
  .byte %00000101 ; Row 5
  .byte %00000001 ; Row 6
  .byte %00000001 ; Row 7
  .byte %00000111 ; Row 8
  .byte %00001000 ; Row 9
  .byte %00011010 ; Row 10
  .byte %00111010 ; Row 11
  .byte %00011111 ; Row 12
  .byte %00110010 ; Row 13

SonicBraking12
  .byte %00000000 ; Row 1
  .byte %01100010 ; Row 2
  .byte %00001000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00000110 ; Row 6
  .byte %00000110 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00000111 ; Row 9
  .byte %00000101 ; Row 10
  .byte %00000101 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00001101 ; Row 13

SonicBrakingColor11
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $88 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicBrakingColor12
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $0E ; Row 3
  .byte $0E ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $86 ; Row 12
  .byte $86 ; Row 13

SonicBraking21
  .byte %00000000 ; Row 1
  .byte %00000100 ; Row 2
  .byte %00010010 ; Row 3
  .byte %00001010 ; Row 4
  .byte %00000101 ; Row 5
  .byte %00000001 ; Row 6
  .byte %00000001 ; Row 7
  .byte %00000111 ; Row 8
  .byte %00001000 ; Row 9
  .byte %00011010 ; Row 10
  .byte %00111010 ; Row 11
  .byte %00011111 ; Row 12
  .byte %00110010 ; Row 13

SonicBraking22
  .byte %00000000 ; Row 1
  .byte %00000010 ; Row 2
  .byte %11001000 ; Row 3
  .byte %00000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00000110 ; Row 6
  .byte %00000110 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00000111 ; Row 9
  .byte %00000101 ; Row 10
  .byte %00000101 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00001101 ; Row 13

SonicBrakingColor21
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $88 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicBrakingColor22
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $0E ; Row 3
  .byte $0E ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $86 ; Row 12
  .byte $86 ; Row 13

SonicBraking31
  .byte %00000000 ; Row 1
  .byte %00000100 ; Row 2
  .byte %00010010 ; Row 3
  .byte %00001010 ; Row 4
  .byte %00000101 ; Row 5
  .byte %00000001 ; Row 6
  .byte %00000001 ; Row 7
  .byte %00000111 ; Row 8
  .byte %00001000 ; Row 9
  .byte %00011010 ; Row 10
  .byte %00111010 ; Row 11
  .byte %00011111 ; Row 12
  .byte %00110010 ; Row 13

SonicBraking32
  .byte %00000000 ; Row 1
  .byte %00011010 ; Row 2
  .byte %00001000 ; Row 3
  .byte %10000000 ; Row 4
  .byte %00000000 ; Row 5
  .byte %00000110 ; Row 6
  .byte %00000110 ; Row 7
  .byte %00000000 ; Row 8
  .byte %00000111 ; Row 9
  .byte %00000101 ; Row 10
  .byte %00000101 ; Row 11
  .byte %00000000 ; Row 12
  .byte %00001101 ; Row 13

SonicBrakingColor31
  .byte $88 ; Row 1
  .byte $38 ; Row 2
  .byte $38 ; Row 3
  .byte $88 ; Row 4
  .byte $88 ; Row 5
  .byte $88 ; Row 6
  .byte $88 ; Row 7
  .byte $88 ; Row 8
  .byte $88 ; Row 9
  .byte $88 ; Row 10
  .byte $88 ; Row 11
  .byte $88 ; Row 12
  .byte $88 ; Row 13

SonicBrakingColor32
  .byte $38 ; Row 1
  .byte $0E ; Row 2
  .byte $0E ; Row 3
  .byte $0E ; Row 4
  .byte $FC ; Row 5
  .byte $FC ; Row 6
  .byte $FC ; Row 7
  .byte $FC ; Row 8
  .byte $1C ; Row 9
  .byte $C8 ; Row 10
  .byte $0E ; Row 11
  .byte $86 ; Row 12
  .byte $86 ; Row 13

SonicBrakingSpeed:
  .byte 4 ; Animation speed

SonicBrakingFrames:
  .byte 3 ; Number of frames









    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Epilogue
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	org $fffc
        .word Start	; reset vector
        .word Start	; BRK vector
